@using ProgrammersBlog.Entities.Concrete
@using ProgrammersBlog.Shared.Utilities.Results.ComplexTypes
@model ProgrammersBlog.Entities.Dtos.Category.CategoryListDto
@{
    ViewBag.Title = "Admin - Programmers Blog";
}

@if (Model.ResultStatus == ResultStatus.Success)
{
    <div id="modalPlaceHolder" aria-hidden="true"></div>
    <div class="card mb-4 my-4">
        <div class="card-header">
            <i class="fas fa-th-list mr-1"></i>
            Kategoriler
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-bordered" id="categoriesTable" width="100%" cellspacing="0">
                    <thead>
                        <tr>
                            <th>#</th>
                            <th>Adı</th>
                            <th>Açıklaması</th>
                            <th>Aktif mi?</th>
                            <th>Silinmiş mi?</th>
                            <th>Oluşturulma Tarihi</th>
                            <th>Oluşturan Kullanıcı</th>
                            <th>İşlemler</th>
                        </tr>
                    </thead>
                    <tbody>
                    @foreach (Category category in Model.Categories)
                    {
                        <tr>
                            <td>@category.Id</td>
                            <td>@category.Name</td>
                            <td>@category.Description</td>
                            <td>
                                @{
                                    if (category.IsActive)
                                    {
                                    <span class="badge badge-success" > Aktif </span>
                                    }
                                    else
                                    {
                                        <span class="badge badge-danger" > Pasif </span>
                                    } 
                                }
                            </td>
                            <td>@{
                                    if (category.IsDeleted)
                                    {
                                        <span class="badge badge-danger" > Evet </span>
                                    }
                                    else
                                    {
                                        <span class="badge badge-success" > Hayır </span>
                                    } 
                                }
                            </td>
                            <td>@category.CreatedDate.ToString("D")</td>
                            <td>@category.CreatedByName</td>
                            <td>-</td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
} else if (Model.ResultStatus == ResultStatus.Error)
{
    <div class="my-4 alert alert-danger">
        <p>@Model.Message</p>
        Dashboard paneline dönmek için <a asp-area="Admin" asp-controller="Home" asp-action="Index">tıklayınız</a>
    </div>
}

@section Scripts
{
    <script>
        $(document).ready(function() {
            const categoriesTable = $('#categoriesTable');
            categoriesTable.DataTable({
                dom:"<'row'<'col-sm-3'l><'col-sm-6 text-center'B><'col-sm-3'f>>" +
                        "<'row'<'col-sm-12'tr>>" +
                        "<'row'<'col-sm-5'i><'col-sm-7'p>>",
                buttons: [
                    {
                        text: 'Ekle',
                        attr: {
                            id: 'btnAdd'
                        },
                        className:'btn btn-sm btn-success',
                        action: function(e, dt, node, config) {
                            
                        }
                    },
                    {
                        text: 'Yenile',
                        className:'btn btn-sm btn-danger',
                        action: function(e, dt, node, config) {
                            alert('Butona tıklandı')
                        }
                    }
                ],
                language: {
                          "emptyTable": "Tabloda herhangi bir veri mevcut değil",
                          "info": "_TOTAL_ kayıttan _START_ - _END_ arasındaki kayıtlar gösteriliyor",
                          "infoEmpty": "Kayıt yok",
                          "infoFiltered": "(_MAX_ kayıt içerisinden bulunan)",
                          "infoThousands": ".",
                          "lengthMenu": "Sayfada _MENU_ kayıt göster",
                          "loadingRecords": "Yükleniyor...",
                          "processing": "İşleniyor...",
                          "search": "Ara:",
                          "zeroRecords": "Eşleşen kayıt bulunamadı",
                          "paginate": {
                              "first": "İlk",
                              "last": "Son",
                              "next": "Sonraki",
                              "previous": "Önceki"
                          },
                          "aria": {
                              "sortAscending": ": artan sütun sıralamasını aktifleştir",
                              "sortDescending": ": azalan sütun sıralamasını aktifleştir"
                          },
                          "select": {
                              "rows": {
                                  "_": "%d kayıt seçildi",
                                  "1": "1 kayıt seçildi",
                                  "0": "-"
                              },
                              "0": "-",
                              "1": "%d satır seçildi",
                              "2": "-",
                              "_": "%d satır seçildi",
                              "cells": {
                                  "1": "1 hücre seçildi",
                                  "_": "%d hücre seçildi"
                              },
                              "columns": {
                                  "1": "1 sütun seçildi",
                                  "_": "%d sütun seçildi"
                              }
                          },
                          "autoFill": {
                              "cancel": "İptal",
                              "fill": "Bütün hücreleri <i>%d<i> ile doldur<\/i><\/i>",
                              "fillHorizontal": "Hücreleri yatay olarak doldur",
                              "fillVertical": "Hücreleri dikey olarak doldur",
                              "info": "-"
                          },
                          "buttons": {
                              "collection": "Koleksiyon <span class=\"ui-button-icon-primary ui-icon ui-icon-triangle-1-s\"><\/span>",
                              "colvis": "Sütun görünürlüğü",
                              "colvisRestore": "Görünürlüğü eski haline getir",
                              "copy": "Koyala",
                              "copyKeys": "Tablodaki sisteminize kopyalamak için CTRL veya u2318 + C tuşlarına basınız.",
                              "copySuccess": {
                                  "1": "1 satır panoya kopyalandı",
                                  "_": "%ds satır panoya kopyalandı"
                              },
                              "copyTitle": "Panoya kopyala",
                              "csv": "CSV",
                              "excel": "Excel",
                              "pageLength": {
                                  "-1": "Bütün satırları göster",
                                  "1": "-",
                                  "_": "%d satır göster"
                              },
                              "pdf": "PDF",
                              "print": "Yazdır"
                          },
                          "decimal": "-",
                          "infoPostFix": "-",
                          "searchBuilder": {
                              "add": "Koşul Ekle",
                              "button": {
                                  "0": "Arama Oluşturucu",
                                  "_": "Arama Oluşturucu (%d)"
                              },
                              "clearAll": "Hepsini Kaldır",
                              "condition": "Koşul",
                              "conditions": {
                                  "date": {
                                      "after": "Sonra",
                                      "before": "Önce",
                                      "between": "Arasında",
                                      "empty": "Boş",
                                      "equals": "Eşittir",
                                      "not": "Değildir",
                                      "notBetween": "Dışında",
                                      "notEmpty": "Dolu"
                                  },
                                  "moment": {
                                      "after": "Sonra",
                                      "before": "Önce",
                                      "between": "Arasında",
                                      "empty": "Boş",
                                      "equals": "Eşittir",
                                      "not": "Değildir",
                                      "notBetween": "Dışında",
                                      "notEmpty": "Dolu"
                                  },
                                  "number": {
                                      "between": "Arasında",
                                      "empty": "Boş",
                                      "equals": "Eşittir",
                                      "gt": "Büyüktür",
                                      "gte": "Büyük eşittir",
                                      "lt": "Küçüktür",
                                      "lte": "Küçük eşittir",
                                      "not": "Değildir",
                                      "notBetween": "Dışında",
                                      "notEmpty": "Dolu"
                                  },
                                  "string": {
                                      "contains": "İçerir",
                                      "empty": "Boş",
                                      "endsWith": "İle biter",
                                      "equals": "Eşittir",
                                      "not": "Değildir",
                                      "notEmpty": "Dolu",
                                      "startsWith": "İle başlar"
                                  }
                              },
                              "data": "Veri",
                              "deleteTitle": "Filtreleme kuralını silin",
                              "leftTitle": "Kriteri dışarı çıkart",
                              "logicAnd": "ve",
                              "logicOr": "veya",
                              "rightTitle": "Kriteri içeri al",
                              "title": {
                                  "0": "Arama Oluşturucu",
                                  "_": "Arama Oluşturucu (%d)"
                              },
                              "value": "Değer"
                          },
                          "searchPanes": {
                              "clearMessage": "Hepsini Temizle",
                              "collapse": {
                                  "0": "Arama Bölmesi",
                                  "_": "Arama Bölmesi (%d)"
                              },
                              "count": "{total}",
                              "countFiltered": "{shown}\/{total}",
                              "emptyPanes": "Arama Bölmesi yok",
                              "loadMessage": "Arama Bölmeleri yükleniyor ...",
                              "title": "Etkin filtreler - %d"
                          },
                          "searchPlaceholder": "Ara",
                          "thousands": "."
                      } 
            });
            @* Datatable end here *@
            
            @* Ajax/GET _CategoryAddPartial içindeki modal form çağrılması*@
            $(function() {
                const url = '@Url.Action("Add", "Category")';
                const modalPlaceHolderDiv = document.getElementById('modalPlaceHolder');
                const btnAdd = document.getElementById('btnAdd');
                  btnAdd.addEventListener('click', function(e) {
                    $.get(url).done(function(data) {
                        modalPlaceHolderDiv.innerHTML = data;
                        const insideModal = modalPlaceHolderDiv.querySelectorAll(".modal")[0];
                        $(insideModal).modal('show');
                        $('#category-is-active-button').bootstrapSwitch();
                    })
                });
                @* Ajax POST / Post form data CategoryAddDTO başlangıcı*@
                $(modalPlaceHolderDiv).on('click', '#btnSave', function(e) {
                    e.preventDefault();
                    const form = $('#form-category-add');
                    const actionUrl = form.attr('action');
                    const dataToSend = form.serialize();
                    $.post(actionUrl, dataToSend).done(function(data) {
                        const categoryAddAjaxViewModel = jQuery.parseJSON(data);
                        const newFormBody = $('.modal-body', categoryAddAjaxViewModel.CategoryAddPartial);
                        $(modalPlaceHolderDiv).find('.modal-body').replaceWith(newFormBody);
                        const isValid = newFormBody.find('[name="IsValid"]').val() === 'True';
                        if (isValid) {
                            $(modalPlaceHolderDiv).find('.modal').modal('hide');
                            const newTableRow = 
                            `
                                <tr>
                                    <td>${categoryAddAjaxViewModel.CategoryDto.Category.Id}</td>
                                    <td>${categoryAddAjaxViewModel.CategoryDto.Category.Name}</td>
                                    <td>${categoryAddAjaxViewModel.CategoryDto.Category.Description}</td>
                                    <td>
                                        ${categoryAddAjaxViewModel.CategoryDto.Category.IsActive ? ' <span class="badge badge-success" > Aktif </span>' : ' <span class="badge badge-danger" > Pasif </span>'}
                                    </td>
                                    <td>
                                        ${categoryAddAjaxViewModel.CategoryDto.Category.IsDeleted ? '<span class="badge badge-danger" > Evet </span>' : '<span class="badge badge-success" > Hayır </span>'}
                                    </td>
                                    <td>${categoryAddAjaxViewModel.CategoryDto.Category.CreatedDate}</td>
                                    <td>${categoryAddAjaxViewModel.CategoryDto.Category.CreatedByName}</td>
                                    <td>-</td>
                                </tr>
                            `;
                            const newTableRowObject = $(newTableRow);
                            newTableRowObject.hide();
                            $('#categoriesTable').append(newTableRowObject);
                            newTableRowObject.fadeIn(3500);
                            iziToast.success({
                                title: 'Başarılı',
                                message: `${categoryAddAjaxViewModel.CategoryDto.Message}`,
                                position:'topCenter'
                            });
                        }
                    });
                });
            });
        })
    </script>
}